name: Deploy to EC2

on:
  push:
    branches:
      - main
    workflow_dispatch:
env:
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create .env.production file
        run: |
          cat > .env.production << EOF
          NODE_ENV=production
          PORT=${{ secrets.PORT }}
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          OPENCAGE_API_KEY=${{ secrets.OPENCAGE_API_KEY }}
          VIRTUAL_HOST=${{ secrets.VIRTUAL_HOST }}
          LETSENCRYPT_HOST=${{ secrets.LETSENCRYPT_HOST }}
          LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          S3_BUCKET=${{ secrets.S3_BUCKET }}
          CLOUDFRONT_URL=${{ secrets.CLOUDFRONT_URL }}
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}
          EOF

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ".env.production,docker-compose.yml,setup-infrastructure.sh"
          target: "${{ secrets.EC2_PROJECT_PATH }}"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ${{ secrets.EC2_PROJECT_PATH }}

            if ! docker ps | grep -q nginx-proxy || ! docker ps | grep -q acme-companion; then
              echo "Infrastructure services not running, setting up..."
              chmod +x setup-infrastructure.sh
              ./setup-infrastructure.sh
            else
              echo "Infrastructure services are running"
            fi

            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker-compose down
            docker-compose pull
            docker-compose up -d
            docker image prune -f
            echo "Deployment completed successfully"
