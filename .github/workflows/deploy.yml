name: Deploy to EC2

on:
  push:
    branches:
      - main
    workflow_dispatch:
env:
  DOCKER_TAG: ${{ github.sha || github.run_id }}
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ROLE_ARN }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create .env.production file
        run: |
          cat > .env.production << EOF
          NODE_ENV=production
          PORT=${{ secrets.PORT }}
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          VIRTUAL_HOST=${{ secrets.VIRTUAL_HOST }}
          LETSENCRYPT_HOST=${{ secrets.LETSENCRYPT_HOST }}
          LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
          CLOUDFRONT_URL=${{ secrets.CLOUDFRONT_URL }}
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}
          AWS_REGION=${{ secrets.AWS_REGION }} 
          OPENSEARCH_URL=${{ secrets.OPENSEARCH_URL }} 
          VIRTUAL_PROTO = wss
          EOF

      - name: Load secrets from SSM
        run: |
          DATABASE_URL=$(aws ssm get-parameter --name "/app/database_url" --with-decryption --query "Parameter.Value" --output text)
          REDIS_PASSWORD=$(aws ssm get-parameter --name "/app/redis-password" --with-decryption --query "Parameter.Value" --output text)
          JWT_SECRET=$(aws ssm get-parameter --name "/app/jwt-secret" --with-decryption --query "Parameter.Value" --output text)
          OPENCAGE_API_KEY=$(aws ssm get-parameter --name "/app/opencage-api-key" --with-decryption --query "Parameter.Value" --output text)
          S3_BUCKET_NAME=$(aws ssm get-parameter --name "/app/s3-bucket-name" --with-decryption --query "Parameter.Value" --output text)

          echo "DATABASE_URL=$DATABASE_URL" >> .env.production
          echo "REDIS_PASSWORD=$REDIS_PASSWORD" >> .env.production
          echo "JWT_SECRET=$JWT_SECRET" >> .env.production
          echo "OPENCAGE_API_KEY=$OPENCAGE_API_KEY" >> .env.production
          echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> .env.production

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ".env.production,docker-compose.yml,setup-infrastructure.sh"
          target: "${{ secrets.EC2_PROJECT_PATH }}"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ${{ secrets.EC2_PROJECT_PATH }}

            sudo docker network create nginx-proxy 2>/dev/null || true 

            if ! sudo docker ps | grep -q nginx-proxy || ! sudo docker ps | grep -q acme-companion; then
              echo "Infrastructure services not running, setting up..."
              chmod +x setup-infrastructure.sh
              ./setup-infrastructure.sh
            else
              echo "Infrastructure services are running"
            fi

            echo "${{ secrets.DOCKER_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            export DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}"
            export VIRTUAL_HOST="${{ secrets.VIRTUAL_HOST }}"
            export LETSENCRYPT_HOST="${{ secrets.LETSENCRYPT_HOST }}"
            export LETSENCRYPT_EMAIL="${{ secrets.LETSENCRYPT_EMAIL }}"

            echo "DOCKER_IMAGE: $DOCKER_IMAGE"
            echo "VIRTUAL_HOST: $VIRTUAL_HOST"

            sudo -E docker-compose down --remove-orphans
            sudo -E docker-compose pull
            sudo -E docker-compose --env-file .env.production up -d
            sudo -E docker image prune -f

            if [ ! -f initialized ]; then
              echo "Running OpenSearch initialization..."
              sudo -E DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}" docker-compose run --rm init-opensearch
              if [ $? -eq 0 ]; then
                echo "OpenSearch initialization successful"
                touch initialized
              else
                echo "OpenSearch initialization failed"
                exit 1
              fi
            else
              echo "OpenSearch already initialized, skipping"
            fi

            echo "Deployment completed successfully"
