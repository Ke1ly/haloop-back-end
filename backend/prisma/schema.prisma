// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model WorkPost {
  id                  String             @id @default(cuid())
  unitId              String
  unit                HostProfile        @relation(fields: [unitId], references: [id], onDelete: Cascade)
  startDate           DateTime
  endDate             DateTime
  recruitCount        Int
  images              WorkPostImage[]
  positionName        String
  positionCategories  PositionCategory[] @relation("WorkPostPositionCategories")
  averageWorkHours    Int
  minDuration         Int
  requirements        Requirement[]      @relation("WorkPostPositionRequirements")
  positionDescription String
  accommodations      Accommodation[]    @relation("WorkPostPositionAccommodations")
  meals               Meal[]             @relation("WorkPostPositionMeals")
  experiences         Experience[]       @relation("WorkPostPositionExperiences")
  environments        Environment[]      @relation("WorkPostPositionEnvironments")
  benefitsDescription String

  matchedSubscriptions MatchedWorkPost[]
  isActive            Boolean            @default(true)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

 @@index([startDate])
 @@index([endDate])
//  @@index([averageWorkHours])
//  @@index([minDuration])
  @@map("work_posts")
}

model WorkPostImage {
  id         String   @id @default(cuid())
  workPostId String
  workPost   WorkPost @relation(fields: [workPostId], references: [id], onDelete: Cascade)

  imageUrl    String
  description String?
  order       Int     @default(0)

  @@map("work_post_images")
}

model Experience {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  workPosts           WorkPost[]           @relation("WorkPostPositionExperiences")
  FilterSubscriptions FilterSubscription[] @relation("FilterSubscriptionExperiences")

  @@map("experience_options")
}

model Environment {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  workPosts           WorkPost[]           @relation("WorkPostPositionEnvironments")
  FilterSubscriptions FilterSubscription[] @relation("FilterSubscriptionEnvironments")

  @@map("environment_options")
}

model Accommodation {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  workPosts           WorkPost[]           @relation("WorkPostPositionAccommodations")
  FilterSubscriptions FilterSubscription[] @relation("FilterSubscriptionAccommodations")

  @@map("accommodation_options")
}

model Meal {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  workPosts           WorkPost[]           @relation("WorkPostPositionMeals")
  FilterSubscriptions FilterSubscription[] @relation("FilterSubscriptionMeals")

  @@map("meal_options")
}

model Requirement {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  workPosts WorkPost[] @relation("WorkPostPositionRequirements")

  @@map("requirement_options")
}

model PositionCategory {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  workPosts           WorkPost[]           @relation("WorkPostPositionCategories")
  FilterSubscriptions FilterSubscription[] @relation("FilterSubscriptionPositionCategories")

  @@map("position_categories")
}

model User {
  id            String                    @id @default(cuid())
  email         String                    @unique
  password      String
  realname      String
  username      String                    @unique
  userType      UserType                  @default(HELPER)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  lastLoginAt   DateTime?
  hostProfile   HostProfile?
  helperProfile HelperProfile?
  conversations ConversationParticipant[]
  messages      Message[]

  @@map("users")
}

enum UserType {
  HOST
  HELPER
}

model HostProfile {
  id              String     @id @default(cuid())
  userId          String     @unique
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  unitName        String
  unitDescription String
  address         String
  city            String
  district        String?
  latitude        Float?
  longitude       Float?
  workPosts       WorkPost[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("host_profiles")
}

model HelperProfile {
  id            String               @id @default(cuid())
  userId        String               @unique
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio           String
  subcriptions  FilterSubscription[]
  notifications Notification[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  @@map("helper_profiles")
  @@index([userId])//Socket.IO 初始化和推薦 cron job 高頻執行
}

model Notification {
  id              String @id @default(cuid())
  helperProfileId String

  title   String
  message String
  data    Json?

  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  helperProfile HelperProfile? @relation(fields: [helperProfileId], references: [id], onDelete: Cascade)

  @@index([helperProfileId, createdAt]) // 複合索引：按幫手和時間查詢
  @@index([helperProfileId, isRead]) // 複合索引：按幫手和已讀狀態查詢
  @@map("notifications")
}

model FilterSubscription {
  id                 String             @id @default(cuid())
  helperProfileId    String
  helperProfile      HelperProfile      @relation(fields: [helperProfileId], references: [id], onDelete: Cascade)
  name               String
  city               String?
  startDate          DateTime?
  endDate            DateTime?
  applicantCount     Int?
  averageWorkHours   Int?
  minDuration        Int?
  filters            Json
  positionCategories PositionCategory[] @relation("FilterSubscriptionPositionCategories")
  accommodations     Accommodation[]    @relation("FilterSubscriptionAccommodations")
  meals              Meal[]             @relation("FilterSubscriptionMeals")
  experiences        Experience[]       @relation("FilterSubscriptionExperiences")
  environments       Environment[]      @relation("FilterSubscriptionEnvironments")
  matchedWorkPosts     MatchedWorkPost[]
  isActive           Boolean            @default(true)
  notifyEmail        Boolean            @default(true)
  notifyPush         Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  @@map("filter_subscriptions")
}
model MatchedWorkPost {
  id                     String              @id @default(cuid())
  workPostId             String
  filterSubscriptionId   String
  matchedAt              DateTime            @default(now())  
  isNotified             Boolean             @default(true)   

  workPost               WorkPost            @relation(fields: [workPostId], references: [id], onDelete: Cascade)
  filterSubscription     FilterSubscription  @relation(fields: [filterSubscriptionId], references: [id], onDelete: Cascade)

  @@unique([workPostId, filterSubscriptionId])  
  @@index([filterSubscriptionId, matchedAt])   
  @@map("matched_work_posts")
}

model Conversation {
  id            String           @id @default(cuid())
  type          ConversationType @default(DIRECT) // 之後視情況啟用群組聊天
  lastMessageAt DateTime?
  createdAt     DateTime         @default(now())
  // updatedAt     DateTime  @updatedAt //若之後啟用群組聊天，作為成員更新設定的紀錄
uniqueParticipantPair  String?   @unique
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id              String    @id @default(cuid())
  conversationId  String
  userId          String
  participantRole UserType
  joinedAt        DateTime  @default(now())
  leftAt          DateTime?
  lastReadAt      DateTime?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
  @@map("conversation_participants")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  messageType    MessageType @default(TEXT)
  // attachments    Json?
  isRead         Boolean     @default(false)
  createdAt      DateTime    @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
  @@index([conversationId, createdAt])
  @@index([conversationId, senderId, isRead])
}

enum ConversationType {
  DIRECT
  GROUP
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}
